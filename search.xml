<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[作用域管理原理]]></title>
    <url>%2F2018%2F12%2F27%2Fhpjavascript2-1%2F</url>
    <content type="text"><![CDATA[执行环境context执行函数add时，会创建一个被称为执行环境（execution context）的内部对象，一个执行环境定义了一个函数执行时的环境。函数每次执行时对应的执行环境都是独一无二的，所以多次调用同一个函数会创建多个执行环境。当函数执行完成时，执行环境就会被销毁 1234function add(num1, num2)&#123; var sum = num1 + num2; return ;&#125; 作用域链与活动对象每个执行环境都有自己的作用域链，用于解析标识符。如图 当执行环境被创建时，它的作用域链初始化为当前运行函数的[Scope]属性中的对象。这些值按照它们出现在函数中的顺序，被复制到执行环境的作用域链中这个过程一旦完成，一个称为“活动对象”(activation Object)的新对象在执行环境中创建好了如上图，活动对象与其他的对象在一个队列中，作用链的最顶端为活动对象，当执行环境被销毁，活动对象也随之销毁 在函数执行过程中，每遇到一个变量，都会经历一次标识符解析过程： 搜索过程从作用域链头部开始搜索（当前活动对象）该变量标识符 如找到则使用，直接使用该标识符 如没有找到，继续搜索作用域链的下一个对象，直到找到为止 若作用域链中所有对象中都没有找到该标识符，那么该标识符被视为未定义的。 全局变量总是存在于执行环境作用域链的最末端，因此它是最远的。要想提高代码性能，请将函数内的全局变量转化成局部变量，提高读取标识符解析速度。]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>高性能JavaScript</tag>
        <tag>作用域</tag>
        <tag>执行环境context</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[无阻塞加载js文件]]></title>
    <url>%2F2018%2F12%2F19%2Fhpjavascript1%2F</url>
    <content type="text"><![CDATA[代码11&lt;script type=&quot;text/javascript&quot; src=&quot;file1.js&quot;&gt;&lt;/script&gt; 代码2 1234var script = document.createElement(&quot;script&quot;);script.type = &quot;text/javascript&quot;;script.src = &quot;file1.js&quot;document.getElementsByTagName(&quot;head&quot;)[0].appendChild(script); 代码1与代码2的异同： 代码1在执行过程中，文件下载后会立刻执行，堵塞页面的其他进程（如其他下载进程） 代码2在执行过程中，文件下载和执行过程不会堵塞页面的其他进程，直到DOM加载完成，因此该方法可以与其他资源并行下载 有多种无堵塞下载JavaScript的方法： 1. 使用script标签的defer属性 2. 使用动态创建的script元素来下载并执行代码 3. 使用XHR对象下载JavaScript代码并注入页面中 以上三种方法各有缺点： 1-1) 支持的浏览器较少 2-1) IE内核浏览器需要额外处理 3-1) 不支持CDN下载]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>高性能JavaScript</tag>
        <tag>无堵塞加载</tag>
      </tags>
  </entry>
</search>
